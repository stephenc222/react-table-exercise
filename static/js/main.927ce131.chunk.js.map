{"version":3,"sources":["util/index.tsx","actions/usersActions.ts","actions/types.ts","constants.ts","components/Container/Container.tsx","components/Table/Table.tsx","components/View/View.tsx","reducers/apiReducer.ts","reducers/usersReducer.ts","reducers/index.tsx","store.ts","App.tsx","index.tsx"],"names":["getDataModel","state","model","getData","dispatch","type","payload","pending","axios","get","then","res","status","data","catch","err","error","getUsers","Error","Container","this","props","api","children","React","Component","connect","ownProps","Column","value","numColumns","className","style","flexBasis","Row","keyOrder","rowIndex","length","map","index","keyName","key","toUpperCase","substring","backgroundColor","keyPath","Table","tableData","KEY_ORDER","View","loading","initialState","users","combineReducers","action","middleware","thunk","store","createStore","rootReducer","composeWithDevTools","applyMiddleware","App","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.927ce131.chunk.js","sourcesContent":["import { getUsers } from '../actions/usersActions';\nimport { Dispatch } from 'react';\nimport { AnyAction } from 'redux';\n\n// gets the particular store object for a given Container\nexport const getDataModel = (\n  state: { api: { error?: string; pending: boolean }; [x: string]: {} },\n  model: string\n) => ({ [model]: state[model] });\n\n// assumes one getter per Container instance\nexport const getData = (model: string, dispatch: Dispatch<AnyAction>) => {\n  switch (model) {\n    case 'users': {\n      return () => getUsers(dispatch);\n    }\n    default: {\n      throw new Error('no model supplied for getData');\n    }\n  }\n};\n","import axios from 'axios';\nimport { API_URL } from '../constants';\nimport {\n  REQUEST_ERRORS,\n  REQUEST_SUCCESS,\n  REQUEST_PENDING,\n  GET_USERS\n} from './types';\nimport { Dispatch } from 'react';\n\nexport interface GetUsersAction {\n  type: string;\n  payload: object;\n}\n\nexport const getUsers = (dispatch: Dispatch<GetUsersAction>) => {\n  dispatch({ type: REQUEST_PENDING, payload: { pending: true } });\n  return axios\n    .get(API_URL)\n    .then(res => {\n      const { status } = res;\n      dispatch({ type: REQUEST_SUCCESS, payload: { status, pending: false } });\n      return dispatch({\n        type: GET_USERS,\n        payload: res.data || []\n      });\n    })\n    .catch(err => {\n      dispatch({\n        type: REQUEST_ERRORS,\n        payload: { error: `${err}`, pending: false }\n      });\n    });\n};\n","export const REQUEST_ERRORS = 'REQUEST_ERRORS';\nexport const REQUEST_SUCCESS = 'REQUEST_SUCCESS';\nexport const REQUEST_PENDING = 'REQUEST_PENDING';\nexport const GET_USERS = 'GET_USERS';\n","export const API_URL = 'https://jsonplaceholder.typicode.com/users';\n","import React, { Dispatch } from 'react';\nimport { connect } from 'react-redux';\nimport { getData, getDataModel } from '../../util';\nimport { AnyAction } from 'redux';\n\nexport interface ContainerProps {\n  api: { error?: string; pending: boolean };\n  getData: () => void;\n  model: string;\n  children: (error: string, loading: boolean, data: {}) => JSX.Element;\n  data: { [x: string]: {} };\n}\n\nclass Container extends React.Component<ContainerProps, {}> {\n  componentDidMount() {\n    this.props.getData();\n  }\n  render() {\n    const { api, data, model, children } = this.props;\n    const { error = '', pending: loading } = api;\n    return children(error, loading, data[model]);\n  }\n}\n\nconst mapStateToProps = (\n  state: { api: { error?: string; pending: boolean }; [x: string]: {} },\n  ownProps: { model: string }\n) => {\n  return {\n    api: state.api,\n    data: getDataModel(state, ownProps.model)[ownProps.model]\n  };\n};\n\nconst mapDispatchToProps = (\n  dispatch: Dispatch<AnyAction>,\n  ownProps: { model: string }\n) => {\n  return {\n    getData: getData(ownProps.model, dispatch)\n  };\n};\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(Container);\n","import React from 'react';\nimport get from 'lodash.get';\nimport './Table.css';\n\n// name of the key, and path to lookup - assuming consuming component knows the data structure it wants to render in a table\ninterface KeyLookup {\n  keyName: string;\n  keyPath: string;\n}\nexport interface TableProps {\n  tableData: RowProps[];\n  keyOrder: KeyLookup[];\n}\n\nexport interface ColumnProps {\n  value: string;\n  numColumns: number;\n}\n\nexport interface RowProps {\n  data: object;\n  rowIndex: number;\n  keyOrder: KeyLookup[];\n}\n\nconst pascalCase = (value: string) =>\n  value[0].toUpperCase() + value.substring(1, value.length);\n\nconst Column = (props: ColumnProps) => {\n  const { value, numColumns } = props;\n  return (\n    <div\n      className=\"column-container\"\n      style={{\n        flexBasis: 1 / numColumns\n      }}\n    >\n      {value}\n    </div>\n  );\n};\n\nconst Row = (props: RowProps) => {\n  const { keyOrder, rowIndex, data } = props;\n  const numColumns = keyOrder.length;\n\n  // header row\n  if (rowIndex === 0) {\n    return (\n      <>\n        <div className=\"header-row\">\n          {keyOrder.map(({ keyName }, index) => (\n            <Column\n              key={`c_${index}`}\n              value={pascalCase(keyName)}\n              numColumns={numColumns}\n            />\n          ))}\n        </div>\n        <div\n          className=\"content-row\"\n          style={{\n            backgroundColor: rowIndex % 2 === 0 ? '#f1f1f1' : ''\n          }}\n        >\n          {keyOrder.map(({ keyPath }, index) => (\n            <Column\n              key={`c_${index}`}\n              value={get(data, keyPath, '-')}\n              numColumns={numColumns}\n            />\n          ))}\n        </div>\n      </>\n    );\n  }\n  return (\n    <div\n      className=\"content-row\"\n      style={{\n        backgroundColor: rowIndex % 2 === 0 ? '#f1f1f1' : ''\n      }}\n    >\n      {keyOrder.map(({ keyPath }, index) => (\n        <Column\n          key={`c_${index}`}\n          value={get(data, keyPath, '-')}\n          numColumns={numColumns}\n        />\n      ))}\n    </div>\n  );\n};\n\nconst Table = (props: TableProps) => {\n  const { tableData, keyOrder } = props;\n  if (!tableData) {\n    return <div>no table data</div>;\n  }\n  return (\n    <div className=\"table-container\">\n      {tableData.map((data, index) => (\n        <Row\n          key={`r_${index}`}\n          rowIndex={index}\n          keyOrder={keyOrder}\n          data={data}\n        />\n      ))}\n    </div>\n  );\n};\n\nexport default Table;\n","import React from 'react';\nimport Table, { RowProps } from '../Table/Table';\n\ninterface ViewProps {\n  loading: boolean;\n  data: {};\n  error: string;\n}\n\nconst KEY_ORDER = [\n  { keyName: 'name', keyPath: 'name' },\n  { keyName: 'email', keyPath: 'email' },\n  { keyName: 'city', keyPath: 'address.city' },\n  { keyName: 'company', keyPath: 'company.name' }\n];\n\nconst View = (props: ViewProps) => {\n  const { error, loading, data } = props;\n  if (error) {\n    return <div>Something went wrong, please refresh the page</div>;\n  }\n  if (loading) {\n    return <div>Loading...</div>;\n  }\n  return (\n    <div>\n      <Table keyOrder={KEY_ORDER} tableData={data as RowProps[]} />\n    </div>\n  );\n};\n\nexport default View;\n","// responsible for handling api request state - success state, pending state, and error state\nimport {\n  REQUEST_ERRORS,\n  REQUEST_SUCCESS,\n  REQUEST_PENDING\n} from '../actions/types';\n\ninterface InitialState {\n  error: string;\n  status: number;\n  pending: boolean;\n}\n\nexport interface ApiAction {\n  type: string;\n  payload?: {\n    error?: string;\n    status?: number;\n    pending: boolean;\n  };\n}\nconst initialState = {\n  error: '',\n  status: 0,\n  pending: false\n};\n\nexport const apiReducer = (\n  state: InitialState = initialState,\n  action: ApiAction\n) => {\n  switch (action.type) {\n    case REQUEST_SUCCESS:\n      return {\n        ...state,\n        ...action.payload\n      };\n    case REQUEST_PENDING:\n      return {\n        ...state,\n        ...action.payload\n      };\n    case REQUEST_ERRORS:\n      return {\n        ...state,\n        ...action.payload\n      };\n    default:\n      return state;\n  }\n};\n","// responsible for handling users request state - success state, pending state, and error state\nimport { GET_USERS } from '../actions/types';\n\nexport interface User {\n  id: number;\n  name: string;\n  username: string;\n  email: string;\n  address: {\n    street: string;\n    suite: string;\n    city: string;\n    zipcode: string;\n    geo: {\n      lat: string;\n      lng: string;\n    };\n  };\n  phone: string;\n  website: string;\n  company: {\n    name: string;\n    catchPhrase: string;\n    bs: string;\n  };\n}\n\ninterface InitialState {\n  users: Array<User>;\n}\nexport interface UsersAction {\n  type: string;\n  payload?: Array<User>;\n}\nconst initialState = {\n  users: []\n};\n\nexport const usersReducer = (\n  state: InitialState = initialState,\n  action: UsersAction\n) => {\n  switch (action.type) {\n    case GET_USERS:\n      return {\n        ...state,\n        users: (action.payload && action.payload) || []\n      };\n    default:\n      return state;\n  }\n};\n","import { combineReducers } from 'redux';\nimport { apiReducer } from './apiReducer';\nimport { usersReducer } from './usersReducer';\n\nexport default combineReducers({\n  api: apiReducer,\n  users: usersReducer\n});\n","import { createStore, applyMiddleware, DeepPartial } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension/logOnlyInProduction';\nimport thunk from 'redux-thunk';\nimport rootReducer from './reducers';\nimport { User } from './reducers/usersReducer';\n\nexport interface InitialState extends DeepPartial<InitialState> {\n  api?: object;\n  users?: Array<User>;\n}\n\nconst initialState = {};\n\nconst middleware = [thunk];\n\nconst store = createStore(\n  rootReducer,\n  initialState,\n  composeWithDevTools(applyMiddleware(...middleware))\n);\n\nexport default store;\n","import React from 'react';\nimport { Provider } from 'react-redux';\nimport Container from './components/Container/Container';\nimport View from './components/View/View';\nimport store from './store';\nimport './App.css';\n\nconst App: React.FC = () => {\n  return (\n    <Provider store={store}>\n      <Container model=\"users\">\n        {(error: string, loading: boolean, data: {}) => {\n          return <View error={error} loading={loading} data={data} />;\n        }}\n      </Container>\n    </Provider>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}