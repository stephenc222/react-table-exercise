{"version":3,"sources":["components/Container.tsx","actions/usersActions.ts","actions/types.ts","constants.ts","components/Table.tsx","components/View.tsx","reducers/apiReducer.ts","reducers/usersReducer.ts","reducers/index.js","store.ts","App.tsx","serviceWorker.ts","index.tsx"],"names":["Container","this","props","getUsers","api","users","error","loading","pending","children","React","Component","mapDispatchToProps","dispatch","type","payload","axios","get","then","res","data","catch","err","message","connect","state","Row","keyOrder","rowIndex","style","borderBottom","display","flexDirection","fontWeight","color","paddingLeft","map","value","keyName","flexGrow","flexBasis","length","marginTop","marginBottom","toUpperCase","substring","backgroundColor","keyPath","paddingTop","paddingBottom","Table","tableData","margin","border","index","KEY_ORDER","View","initialState","status","combineReducers","action","middleware","thunk","store","createStore","rootReducer","composeWithDevTools","applyMiddleware","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.5c060079.chunk.js","sourcesContent":["import React from 'react'\nimport {connect } from 'react-redux'\nimport { getUsers } from '../actions/usersActions'\n\nexport interface ContainerProps {\n  api: { error?: string, pending: boolean},\n  getUsers: () => void,\n  users: [],\n  children: (error: string, loading: boolean, data: any) => JSX.Element\n}\n\nexport interface ContainerState {\n  \n}\n\nclass Container extends React.Component<ContainerProps, ContainerState> {\n  componentDidMount() {\n    this.props.getUsers()\n  }\n  render() {\n    const {api, users } = this.props\n    const { error = '', pending: loading } = api\n    return this.props.children(error, loading, users)\n  }\n}\n\nconst mapStateToProps = (state: { api: any, users: any}) => ({\n  api: state.api,\n  users: state.users,\n});\n\nconst mapDispatchToProps = {\n  getUsers\n}\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps,\n)(Container);\n","import axios from 'axios'\nimport { API_URL } from '../constants'\nimport { REQUEST_ERRORS, REQUEST_SUCCESS, REQUEST_PENDING, GET_USERS } from './types'\nimport { Dispatch } from 'react';\n\ninterface GetAction {\n  type: string,\n  payload: object\n}\n\nexport const getUsers = () => (dispatch: Dispatch<GetAction>) => {\n  dispatch({type: REQUEST_PENDING, payload: { pending: true}})\n  return axios.get(API_URL)\n    .then(res => {\n      dispatch({type: REQUEST_SUCCESS, payload: { pending: false }})\n      return dispatch({\n        type: GET_USERS,\n        payload: res.data || [] \n      })\n    })\n    .catch(err => {\n      dispatch({ type: REQUEST_ERRORS, payload: { message: `${err}`, pending: false }})\n    });\n}","export const REQUEST_ERRORS: string = 'REQUEST_ERRORS'\nexport const REQUEST_SUCCESS: string = 'REQUEST_SUCCESS'\nexport const REQUEST_PENDING: string = 'REQUEST_PENDING'\nexport const GET_USERS: string = 'GET_USERS'","export const API_URL = 'https://jsonplaceholder.typicode.com/users'","import React, { useEffect } from 'react'\nimport get from 'lodash.get'\n\n// name of the key, and path to lookup - assuming consuming component knows the data structure it wants to render in a table\ninterface KeyLookup {\n  keyName: string,\n  keyPath: string\n}\nexport interface TableProps {\n  tableData: any[],\n  keyOrder: KeyLookup[]\n}\n\nexport interface RowProps {\n  data: object,\n  rowIndex: number,\n  keyOrder: KeyLookup[]\n}\n\nconst pascalCase = (value: string) => value[0].toUpperCase() + value.substring(1, value.length)\n\nconst Row = (props: RowProps) => {\n  const {\n    keyOrder,\n    rowIndex,\n    data\n  } = props\n\n  // header row\n  if (rowIndex === 0) {\n    return (\n      <div\n        style={{\n          borderBottom: '1px solid lightgrey',\n          display: 'flex',\n          flexDirection: 'row',\n          fontWeight: 'bold',\n          color: 'grey',\n          paddingLeft: 5\n        }}\n      >\n        { \n          keyOrder.map(({keyName}) => \n            <div\n              style={{\n                flexGrow: 1,\n                flexBasis: 1 / keyOrder.length,\n                marginTop: 5,\n                marginBottom: 5\n              }}\n            >\n              {pascalCase(keyName)}\n            </div>\n          )}\n      </div>\n    )\n  }\n  return (\n    <div\n      style={{ \n        display: 'flex',\n        flexDirection: 'row',\n        paddingLeft: 5,\n        backgroundColor: rowIndex % 2 === 0 ? '#f1f1f1' : '',\n      }}\n    >\n      { keyOrder.map(({keyPath})=>\n          <div \n            style={{\n              flexGrow: 1, \n              flexBasis: 1 / keyOrder.length,\n              paddingTop: 5,\n              paddingBottom: 5\n            }}\n          >\n            {get(data, keyPath, '-')}\n          </div>\n        )}\n    </div>\n  )\n}\n\nconst Table = (props: TableProps) => {\n  const { tableData, keyOrder } = props\n  return (\n    <div style={{margin: 25, border: '1px solid grey'}}>\n      {tableData && tableData.map( (data, index) => <Row rowIndex={index} keyOrder={keyOrder} data={data}/> )}\n      \n    </div>\n  )\n}\n\nexport default Table\n","import React from 'react'\nimport Table from './Table'\n\ninterface ViewProps {\n  loading: boolean,\n  data: any,\n  error: string\n}\n\nconst KEY_ORDER = [\n  {keyName: 'name', keyPath: 'name'},\n  {keyName: 'email', keyPath: 'email'},\n  {keyName: 'city', keyPath: 'address.city'},\n  {keyName: 'company', keyPath: 'company.name'}\n]\n\nconst View = (props: ViewProps) => {\n  const { error, loading, data } = props\n  if (error) {\n    return <div>Something went wrong, please refresh the page</div>\n  }\n  if (loading) {\n    return <div>Loading...</div>\n  }\n  return (\n    <div>\n      <Table keyOrder={KEY_ORDER} tableData={data.users}/>\n    </div>\n  )\n}\n\nexport default View\n","// responsible for handling api request state - success state, pending state, and error state\nimport { REQUEST_ERRORS, REQUEST_SUCCESS, REQUEST_PENDING } from '../actions/types'\n\ninterface InitialState {\n  error: string\n  status: number\n  pending: boolean\n}\n\ninterface ApiAction {\n  type: string,\n  payload: {\n    error?: string\n    status?: number\n    pending: boolean\n  }\n}\nconst initialState = {\n  error: '',\n  status: 0,\n  pending: false\n}\n\nexport const apiReducer = ( state: InitialState = initialState, action: ApiAction) => {\n  switch (action.type) {\n    case REQUEST_SUCCESS:\n      return {\n        ...state,\n        ...action.payload\n      };\n    case REQUEST_PENDING:\n      return {\n        ...state,\n        ...action.payload\n      };\n    case REQUEST_ERRORS:\n      return {\n        ...state,\n        ...{ message: action.payload }\n      };\n    default:\n      return state;\n  }\n}","// responsible for handling users request state - success state, pending state, and error state\nimport { GET_USERS } from '../actions/types'\n\ninterface InitialState {\n  users: User[]\n}\ninterface User {\n  id: number,\n    name: string,\n    username: string,\n    email: string,\n    address: {\n      street: string,\n      suite: string,\n      city: string,\n      zipcode: string,\n      geo: {\n        lat: string,\n        lng: string\n      }\n    },\n    phone: string,\n    website: string,\n    company: {\n      name: string,\n      catchPhrase: string,\n      bs: string\n    }\n}\n\ninterface UsersAction {\n  type: string,\n  payload: {\n    users: User[]\n  }\n}\nconst initialState = {\n  users: []\n}\n\nexport const usersReducer = ( state: InitialState = initialState, action: UsersAction) => {\n  switch (action.type) {\n    case GET_USERS:\n      return {\n        ...state,\n        users: action.payload\n      };\n    default:\n      return state;\n  }\n}","import { combineReducers } from 'redux';\nimport { apiReducer } from './apiReducer'\nimport { usersReducer } from './usersReducer'\n\nexport default combineReducers({\n  api: apiReducer,\n  users: usersReducer\n});\n","import { createStore, applyMiddleware } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension/logOnlyInProduction';\nimport thunk from 'redux-thunk';\nimport rootReducer from './reducers';\n\nexport declare interface InitialState {\n  api: object,\n  users : any[]\n}\n\nconst initialState: InitialState = {\n  api: {},\n  users: []\n};\n\nconst middleware = [thunk];\n\nconst store = createStore(\n  rootReducer,\n  initialState,\n  composeWithDevTools(applyMiddleware(...middleware))\n);\n\nexport default store;\n","import React from 'react'\nimport { Provider } from 'react-redux'\nimport Container from './components/Container'\nimport View from './components/View'\nimport store from './store'\nimport './App.css'\n\nconst App: React.FC = () => {\n  return (\n    <Provider store={store}>\n      <Container>\n        {(error, loading, data) => {\n          return <View error={error} loading={loading} data={data} />\n        }}\n        </Container>\n    </Provider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}