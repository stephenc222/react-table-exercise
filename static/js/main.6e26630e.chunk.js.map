{"version":3,"sources":["util/index.tsx","actions/usersActions.ts","actions/types.ts","constants.ts","components/Container/Container.tsx","components/Table/Table.tsx","components/View/View.tsx","reducers/apiReducer.ts","reducers/usersReducer.ts","reducers/index.tsx","store.ts","App.tsx","serviceWorker.ts","index.tsx"],"names":["getData","model","dispatch","type","payload","pending","axios","get","then","res","status","data","catch","err","error","getUsers","Error","Container","this","props","api","loading","children","React","Component","getDataModel","state","connect","ownProps","Column","value","numColumns","className","style","flexBasis","Row","keyOrder","rowIndex","length","map","index","keyName","key","toUpperCase","substring","backgroundColor","keyPath","Table","tableData","KEY_ORDER","View","initialState","users","combineReducers","action","middleware","thunk","store","createStore","rootReducer","composeWithDevTools","applyMiddleware","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.6e26630e.chunk.js","sourcesContent":["\nimport { getUsers } from '../actions/usersActions'\nimport { Dispatch } from 'react';\nimport { AnyAction } from 'redux';\n\n// assumes one getter per Container instance\nexport const getData = (model: string, dispatch: Dispatch<AnyAction>) => {\n  switch(model) {\n    case ('users'): {\n      return () => getUsers(dispatch)\n    }\n    default: {\n      throw new Error('no model supplied for getData')\n    }\n  }\n} ","import axios from 'axios'\nimport { API_URL } from '../constants'\nimport { REQUEST_ERRORS, REQUEST_SUCCESS, REQUEST_PENDING, GET_USERS } from './types'\nimport { Dispatch } from 'react';\n\nexport interface GetUsersAction {\n  type: string,\n  payload: object\n}\n\nexport const getUsers = (dispatch: Dispatch<GetUsersAction>) => {\n  dispatch({type: REQUEST_PENDING, payload: { pending: true}})\n  return axios.get(API_URL)\n    .then(res => {\n      const { status } = res\n      dispatch({type: REQUEST_SUCCESS, payload: { status, pending: false }})\n      return dispatch({\n        type: GET_USERS,\n        payload: res.data || [] \n      })\n    })\n    .catch(err => {\n      dispatch({ type: REQUEST_ERRORS, payload: { error: `${err}`, pending: false }})\n    });\n}","export const REQUEST_ERRORS: string = 'REQUEST_ERRORS'\nexport const REQUEST_SUCCESS: string = 'REQUEST_SUCCESS'\nexport const REQUEST_PENDING: string = 'REQUEST_PENDING'\nexport const GET_USERS: string = 'GET_USERS'","export const API_URL = 'https://jsonplaceholder.typicode.com/users'","import React, { Dispatch } from 'react'\nimport { connect } from 'react-redux'\nimport { getData } from '../../util'\nimport { AnyAction } from 'redux';\n\nexport interface ContainerProps {\n  api: { error?: string, pending: boolean},\n  getData: () => void,\n  model: string,\n  children: (error: string, loading: boolean, data: any) => JSX.Element,\n  data: {[x: string]: any}\n}\n\nexport interface ContainerState {\n  \n}\n\nclass Container extends React.Component<ContainerProps, ContainerState> {\n  componentDidMount() {\n    this.props.getData()\n  }\n  render() {\n    const {api, data, model } = this.props\n    const { error = '', pending: loading } = api\n    return this.props.children(error, loading, data[model])\n  }\n}\n\nconst getDataModel = (state: any, model: string) => ({ [`${model}`]: state[`${model}`]  })\n\nconst mapStateToProps = (state: { api: { error?: string, pending: boolean}, users: any}, ownProps: { model: string}) => {\n  return {\n    api: state.api,\n    data: getDataModel(state, ownProps.model)[ownProps.model]\n  }\n}\n\nconst mapDispatchToProps = (dispatch: Dispatch<AnyAction>, ownProps: { model: string } ) => {\n  return ({\n    getData: getData(ownProps.model, dispatch)\n  })\n}\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps,\n)(Container)\n","import React from 'react'\nimport get from 'lodash.get'\nimport './Table.css'\n\n// name of the key, and path to lookup - assuming consuming component knows the data structure it wants to render in a table\ninterface KeyLookup {\n  keyName: string,\n  keyPath: string\n}\nexport interface TableProps {\n  tableData: RowProps[],\n  keyOrder: KeyLookup[]\n}\n\nexport interface ColumnProps {\n  value: string,\n  numColumns: number\n}\n\nexport interface RowProps {\n  data: object,\n  rowIndex: number,\n  keyOrder: KeyLookup[]\n}\n\nconst pascalCase = (value: string) => value[0].toUpperCase() + value.substring(1, value.length)\n\nconst Column = (props: ColumnProps) => {\n  const { value, numColumns } = props\n  return (\n    <div\n      className='column-container'\n      style={{\n        flexBasis: 1 / numColumns,\n      }}\n    >\n      {value}\n    </div>\n  )\n}\n\nconst Row = (props: RowProps) => {\n  const {\n    keyOrder,\n    rowIndex,\n    data\n  } = props\n  const numColumns = keyOrder.length\n\n  // header row\n  if (rowIndex === 0) {\n    return (\n      <div\n        className='header-row'\n      >\n        { \n          keyOrder.map(({keyName}, index) => \n            <Column key={`c_${index}`} value={pascalCase(keyName)} numColumns={numColumns}/>)\n        }\n      </div>\n    )\n  }\n  return (\n    <div\n      className='content-row'\n      style={{ \n        backgroundColor: rowIndex % 2 === 0 ? '#f1f1f1' : '',\n      }}\n    >\n      { \n        keyOrder.map(({keyPath}, index) => \n          <Column key={`c_${index}`} value={get(data, keyPath, '-')} numColumns={numColumns}/>)\n      }\n    </div>\n  )\n}\n\nconst Table = (props: TableProps) => {\n  const { tableData, keyOrder } = props\n  if (!tableData) {\n    return <div>no table data</div>\n  }\n  return (\n    <div className='table-container'>\n      {tableData.map( (data, index) => <Row key={`r_${index}`} rowIndex={index} keyOrder={keyOrder} data={data}/> )}\n      \n    </div>\n  )\n}\n\nexport default Table\n","import React from 'react'\nimport Table from '../Table/Table'\n\ninterface ViewProps {\n  loading: boolean,\n  data: any,\n  error: string\n}\n\nconst KEY_ORDER = [\n  {keyName: 'name', keyPath: 'name'},\n  {keyName: 'email', keyPath: 'email'},\n  {keyName: 'city', keyPath: 'address.city'},\n  {keyName: 'company', keyPath: 'company.name'}\n]\n\nconst View = (props: ViewProps) => {\n  const { error, loading, data } = props\n  if (error) {\n    return <div>Something went wrong, please refresh the page</div>\n  }\n  if (loading) {\n    return <div>Loading...</div>\n  }\n  return (\n    <div>\n      <Table keyOrder={KEY_ORDER} tableData={data}/>\n    </div>\n  )\n}\n\nexport default View\n","// responsible for handling api request state - success state, pending state, and error state\nimport { REQUEST_ERRORS, REQUEST_SUCCESS, REQUEST_PENDING } from '../actions/types'\n\ninterface InitialState {\n  error: string\n  status: number\n  pending: boolean\n}\n\nexport interface ApiAction {\n  type: string,\n  payload?: {\n    error?: string\n    status?: number\n    pending: boolean\n  }\n}\nconst initialState = {\n  error: '',\n  status: 0,\n  pending: false\n}\n\nexport const apiReducer = ( state: InitialState = initialState, action: ApiAction) => {\n  switch (action.type) {\n    case REQUEST_SUCCESS:\n      return {\n        ...state,\n        ...action.payload\n      };\n    case REQUEST_PENDING:\n      return {\n        ...state,\n        ...action.payload\n      };\n    case REQUEST_ERRORS:\n      return {\n        ...state,\n        ...action.payload\n      };\n    default:\n      return state;\n  }\n}","// responsible for handling users request state - success state, pending state, and error state\nimport { GET_USERS } from '../actions/types'\n\nexport interface User {\n  id: number,\n  name: string,\n  username: string,\n  email: string,\n  address: {\n    street: string,\n    suite: string,\n    city: string,\n    zipcode: string,\n    geo: {\n      lat: string,\n      lng: string\n    }\n  },\n  phone: string,\n  website: string,\n  company: {\n    name: string,\n    catchPhrase: string,\n    bs: string\n  }\n}\n\ninterface InitialState {\n  users: Array<User>\n}\nexport interface UsersAction {\n  type: string,\n  payload?: Array<User>  \n}\nconst initialState = {\n  users: []\n}\n\nexport const usersReducer = ( state: InitialState = initialState, action: UsersAction) => {\n  switch (action.type) {\n    case GET_USERS:\n      return {\n        ...state,\n        users: (action.payload && action.payload) || []\n      };\n    default:\n      return state;\n  }\n}","import { combineReducers } from 'redux'\nimport { apiReducer } from './apiReducer'\nimport { usersReducer } from './usersReducer'\n\nexport default combineReducers({\n  api: apiReducer,\n  users: usersReducer\n})\n","import { createStore, applyMiddleware, DeepPartial } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension/logOnlyInProduction';\nimport thunk from 'redux-thunk';\nimport rootReducer from './reducers';\nimport { User } from './reducers/usersReducer';\n\n\nexport interface InitialState extends DeepPartial<InitialState> {\n  api?: object,\n  users?: Array<User> \n}\n\nconst initialState = {}\n\nconst middleware = [thunk];\n\nconst store = createStore(\n  rootReducer,\n  initialState,\n  composeWithDevTools(applyMiddleware(...middleware))\n);\n\nexport default store;\n","import React from 'react'\nimport { Provider } from 'react-redux'\nimport Container from './components/Container/Container'\nimport View from './components/View/View'\nimport store from './store'\nimport './App.css'\n\nconst App: React.FC = () => {\n  return (\n    <Provider store={store}>\n      <Container model='users' >\n        {(error: string, loading: boolean, data: any) => {\n          return <View error={error} loading={loading} data={data} />\n        }}\n        </Container>\n    </Provider>\n  )\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './App'\nimport * as serviceWorker from './serviceWorker'\n\nReactDOM.render(<App />, document.getElementById('root'))\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}